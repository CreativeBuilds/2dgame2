var express = require('express');
var app = express();
var http = require('http').Server(app);
var io = require('socket.io')(http);
const mongo = require('mongodb');
const mongoose = require('mongoose');
var passport = require('passport');
var GoogleStrategy = require('passport-google-auth').Strategy;
var passportSocketIo = require('passport.socketio');
var cookieParser = require('cookie-parser');

var session = require('express-session');

const {google} = require('googleapis');

const config = require('./config.json');

const fs = require('fs');

mongoose.connect('mongodb://localhost/8bitish');

var MongooseSession = require("mongoose-session-store");
var MongooseSessionStore = new MongooseSession({
    interval: 120000 // expiration check worker run interval in millisec (default: 60000)
});

mongoose.connection.on('connected', function(){

  // var user = new User({username:'CreativeBuilds',email:'ihatemongodbs@gmail.com'});

  // user.save();

  
})

var Schema = mongoose.Schema;

var UserSchema = new Schema({
  username:String,
  email:String,
  firstLogon:Boolean
});

UserSchema.statics.findOneOrCreate = function findOneOrCreate({condition, obj}, callback){
  const self = this;
  if(!condition){return callback("No condition provided");}
  if(!obj){obj = condition}
  self.findOne(condition, (err, result) => {
    if(err || result === null){
      //Theres no user
      self.create(obj, (err, result) => {
        return callback(err, result);
      })
    } else {
      return callback(err, result);
    }
  })
}

var User = mongoose.model('User', UserSchema);



// Loop through every file in the schema folder
// fs.readdir(__dirname+'/schemas', function(err, files) {
//   if (err) {
//       console.error("Could not list the directory.", err);
//       process.exit(1);
//   }

//   files.forEach(function(file, index) {
//       // Make one pass and make the file complete

//       let name = file.replace('.js','');
//       exports[name] = require(__dirname+'/schemas/'+file);

//   });
// });




  passport.use(new GoogleStrategy({
      clientId: config.clientId, //Generated by google
      clientSecret: config.clientSecret, //Generated by google
      callbackURL: 'http://localhost:3000/auth/callback/google'
    },
  function(accessToken, refreshToken, profile, done) {
    
    //Find the user in the database, if the user doesn't exist
    //Make a new use object!

      User.findOneOrCreate({condition:{email:profile.emails[0].value},obj:{email:profile.emails[0].value,username:profile.displayName,firstLogon:true}}, function(err, result){
        if(err){
          console.error(err);
        } else {
          console.log(result);
        }
        done(err, result);
      })
    }
  ));

  // used to serialize the user for the session
  passport.serializeUser(function(user, done) {
    console.log(user._id);
    done(null, user._id.toString()); 
  });

  // used to deserialize the user
  passport.deserializeUser(function(id, done) {
    User.findOne({_id:id}, function(err, user) {
        done(err, user);
    });
  });

  app.use(session({
    secret:process.env.SECRET_KEY_BASE,
    cookie:{
      maxAge:1000*60*60*24
    },
    resave:false,
    saveUninitialized:true
  }))

  app.use(passport.initialize());
  app.use(passport.session());

function init(){
  http.listen(3000, function(){
    console.log('listening on *:3000');
  });
  
}


app.get('/', function(req, res){
  if(req.user){
    console.log(req.user);
    res.sendFile(__dirname + '/html/index.html');
  } else {
    res.redirect('/login')
  }
  
});

app.get('/auth/callback/google', 
    passport.authenticate('google', { failureRedirect: '/login' , successRedirect: '/'})
);

app.get('/login', passport.authenticate('google'));

app.use(express.static('html'))

let sockets = [];

io.use(passportSocketIo.authorize({
  key: 'connect.sid',
  secret: process.env.SECRET_KEY_BASE,
  store: MongooseSessionStore,
  passport: passport,
  cookieParser: cookieParser
}));

io.on('connection', function(socket){
  console.log('a user connected');
  /* see if the user is logged on */
  // If they're not logged on, send them to logon screen

  sockets.push(socket);

  socket.on('disconnect', function(){
    sockets.splice(sockets.find(socket), 1);
  })

});


init();
